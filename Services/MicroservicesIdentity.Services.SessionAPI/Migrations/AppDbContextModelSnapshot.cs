// <auto-generated />
using System;
using MicroservicesIdentity.Services.SessionAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroservicesIdentity.Services.SessionAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MicroservicesIdentity.Services.SessionAPI.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abstract = "This talk is about X",
                            Date = new DateTime(2024, 3, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            Location = "Test Room 1",
                            Name = "The Best Talk Ever",
                            SpeakerName = "Jane Doe",
                            StartTime = new DateTime(2024, 3, 6, 16, 2, 42, 819, DateTimeKind.Local).AddTicks(4040)
                        },
                        new
                        {
                            Id = 2,
                            Abstract = "This talk is about Y",
                            Date = new DateTime(2024, 3, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            Location = "Test Room 2",
                            Name = "The Second Best Talk Ever",
                            SpeakerName = "Jane Doe",
                            StartTime = new DateTime(2024, 3, 6, 16, 2, 42, 819, DateTimeKind.Local).AddTicks(4080)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
